{
  "hash": "4741d1303241758fe93ce4e1f288da07",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Positron\"\ndate-modified: \"2025-03-22\"\n---\n\n\n\n\n[Positron](https://positron.posit.co/) is the next [IDE](https://en.wikipedia.org/wiki/Integrated_development_environment) developed by [Posit](https://posit.co/), the creators of [RStudio]() to deploy data science projects. \n\n\n## Installation\n\nTo install Positron, go to their [website](https://positron.posit.co) and click on [get started](https://positron.posit.co/start.html). Afterwards, follow the instructions to prepare your computer to use positron. This involves either installing R from [CRAN](https://cloud.r-project.org/) or Python via [pyenv](https://github.com/pyenv/pyenv) ([Windows](https://github.com/pyenv-win/pyenv-win)). Once that is done, you can navigate to their download [page](https://positron.posit.co/download.html), where you can download the appropriate file. Afterwards, run the installer and follow the prompts.\n\nAfter you install Positron, it should look like this:\n\n![](img/Screenshot%20From%202024-12-26%2014-35-49.png){fig-alt=\"An image displaying the Positron IDE, the interpreter is R.\"}\n\nNote that I changed the appearance of Positron to dark theme. Here is Positron when Python is being utilized:\n\n![](img/Screenshot%20From%202024-12-26%2014-36-00.png){fig-alt=\"An image displaying the Positron IDE, the interpreter is Python.\"}\n\n\n### VS Code\n\nPositron is based on Microsoft's [Code OSS](https://github.com/microsoft/vscode) platform, which makes it look very similar to [visual Studio Code](https://code.visualstudio.com/). It is an [IDE](https://en.wikipedia.org/wiki/Integrated_development_environment) similar to RStudio, but it is program agnostic. Additionally, it is capable to be more customizable with the use of extensions provided by [Open VSX](https://open-vsx.org/); however, you may install extensions from [VS Code](https://marketplace.visualstudio.com/vscode) as well.\n\nTo learn more about Positron and VS Code, visit the following pages:\n\n  - [Positron Introduction](https://youtu.be/8uRcB34Hhsw?si=ZbycZdtjZ_cvnOJv)\n  - [Positron Guides](https://positron.posit.co/add-to-path.html)\n  - [R Package Development](https://blog.stephenturner.us/p/r-package-development-in-positron)\n  - [GitHub Discussions](https://github.com/posit-dev/positron/discussions)\n  - [VS Code Help](https://code.visualstudio.com/docs/introvideos/basics)\n  - [VS Code Basics Videos](https://code.visualstudio.com/docs/getstarted/introvideos)\n\n\n## Positron Application\n\n### Layout\n\nThe default layout has 3 main panes: an editor, console, and other (right side; session, help, viewer, ...)\n\n![](img/gc_21.png){fig-alt=\"An image displaying the Positron IDE.\"}\n\n\nThe editor pane allows you to create scripts and documents.\n\n![](img/gc_24.png){fig-alt=\"An image displaying to editor pane.\"}\n\nThe console pane contains the language console you are working with, as well as a terminal pane.\n\n![](img/gc_26.png){fig-alt=\"An image displaying the R console.\"}\n\n\nOn the top-right corner, you will notice which language is being used and the current workspace.\n\n![](img/gc_22.png){fig-alt=\"An image displaying the language being used and workspace.\"}\n\n\nThe button above the programming language being used can let you change the layout of Positron.\n\n![](img/gc_28.png){fig-alt=\"An image indicating how to customize the layout of Positron\"}\n\nClicking it will create a new window to select a desired layout.\n\n![](img/gc_27.png){fig-alt=\"An image allowing users to change they layout of an Positron\"}\n\nClicking the \"Side-By-Side Layout\" will create layout like below.\n\n![](img/gc_29.png){fig-alt=\"An image showing positron with a Side-By-Side Layout.\"}\n\n\n## Data Science Projects\n\n\nIn Positron, and VS Code, projects are created as workspaces by associating folders as specialized place called workspaces. These workspaces allow you to organize your projects as necessary, such as creating folders for you scripts, data, source files, and much more. Additionally, you can initialize a git repository for the work space \n\nIt is highly recommended to creat a workspace for any project you work on.\n\n### Python\n\nTo create a Python-based workspace, you will go to the top right corner and click on the folder icon:\n\n![](img/Screenshot%20From%202024-12-26%2014-36-21.png)\n\nThis will open a new drop-down menu:\n\n![](img/Screenshot%20From%202024-12-26%2014-38-04.png)\n\nClick on the \"New Project...\" to begin creating a workspace. This will then create a new window:\n\n![](img/Screenshot%20From%202024-12-26%2014-38-21.png)\n\nNow select the \"Python Project\" and click \"Next\". Afterwards, a new window will popup asking you to create a new folder and where to store it:\n\n![](img/Screenshot%20From%202024-12-26%2014-38-57.png)\n\nNotice that I have the \"Initialize project at Git repository\", if you have [git](https://git-scm.com/) installed and plan to use it, it would be a good idea to initialize it. Then, a new window will popup asking you to create a new Python environment:\n\n![](img/Screenshot%20From%202024-12-26%2014-39-29.png)\n\nI recommend doing so. This will create a new environment that I believe will only be used for the project. Note, you will need to install the python modules again for this new environment. A final window will popup:\n\n![](img/Screenshot%20From%202024-12-26%2014-39-50.png)\n\nYou should click \"New Window\" for now. This will open a new session of Positron. It may take a few minutes to create the python environment, but it will work after.\n\n## Quarto\n\nWhen working in Quarto, the python chunks can send code to a console to be executed. The console is set up to use python via pyenv. However, whenever the quarto document gets an R chunk, the console will immediately change to an R console, and all the python chunks will be sent to the R console and evaluated with [reticulate](https://rstudio.github.io/reticulate/). This would be okay, but reticulate may not have all the python packages that pyenv has. I have tried searching for a way to have reticulate communicate with the pyenv installation, but I haven't found anything thus far. Therefore, I recommend installing python modules via reticulate.\n\nYou can install a python module with:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreticulate::py_install(\"polars\")\n```\n:::\n\n\n\n\n\n## Extensions\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}